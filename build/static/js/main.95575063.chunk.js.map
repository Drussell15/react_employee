{"version":3,"sources":["components/header/header.js","components/search/search.js","components/employee/employee.js","components/hooks/hooks.js","components/button/button.js","components/table/table.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","SearchName","id","type","placeholder","aria-label","EmployeeContext","createContext","useGet","url","useContext","employees","setEmployees","displayedEmployees","setDisplayedEmployees","useEffect","a","axios","get","response","data","results","console","log","getEmployees","sortFunc","sort","b","name","first","last","Button","children","Table","useState","onClick","map","employee","key","login","uuid","gender","email","dob","age","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"gNAaeA,MATf,WACI,OACE,yBAAKC,UAAU,UACb,oDCkBOC,EAtBI,WAGjB,OACE,yBAAKD,UAAU,aACb,yBAAKA,UAAU,eACX,yBAAKA,UAAU,uBACb,0BAAMA,UAAU,mBAAmBE,GAAG,MAIxC,2BACAF,UAAU,uBACVG,KAAK,SACLC,YAAY,OACZC,aAAW,YAGb,4C,uCCnBKC,EAAkBC,wBAAc,M,iBCEtC,SAASC,EAAOC,GAAM,IAAD,EACsDC,qBAAWJ,GAAjFK,EADgB,EAChBA,UAAWC,EADK,EACLA,aAAcC,EADT,EACSA,mBAAoBC,EAD7B,EAC6BA,sBAwDrD,OApDAC,qBAAU,WAAM,4CACZ,4BAAAC,EAAA,+EAE+BC,IAAMC,IAAIT,GAFzC,OAEcU,EAFd,OAGQP,EAAaO,EAASC,KAAKC,SAC3BP,EAAsBK,EAASC,KAAKC,SAJ5C,gDAOQC,QAAQC,IAAI,4CAAZ,MAPR,0DADY,uBAAC,WAAD,wBAWZC,KACD,IAwCI,CAAEX,qBAAoBY,SAtC7B,SAAkBC,GACd,OAAQA,GACJ,IAAK,OAaTf,EAAUe,MAAK,SAAUV,EAAGW,GACxB,OAAIX,EAAEY,KAAKC,MAAQF,EAAEC,KAAKC,OACd,EAED,KAIff,EAAsB,YAAIH,IAnBlB,MACJ,IAAK,OAuBTA,EAAUe,MAAK,SAAUV,EAAGW,GACxB,OAAIX,EAAEY,KAAKE,KAAOH,EAAEC,KAAKE,MACb,EAED,KAGfhB,EAAsB,YAAIH,IA5BlB,MACJ,QACIW,QAAQC,IAAI,oCCpBbQ,MAVf,YAA+B,IAAbC,EAAY,EAAZA,SAEd,OACI,4BAAQhC,UAAU,UACbgC,ICoCEC,MArCf,WAAkB,IAAD,EAECC,mBAAS,yCAEfT,EAAajB,EAJR,qBAILiB,SAEAZ,EAAuBH,qBAAWJ,GAAlCO,mBAER,OACI,+BACI,+BACI,4BACI,wBAAIsB,QAAS,kBAAMV,EAAS,UAAS,kBAAC,EAAD,oBACrC,yCACA,mCACA,sCACA,sCACA,wBAAIU,QAAS,kBAAMV,EAAS,SAAQ,kBAAC,EAAD,eAG5C,+BACKZ,EAAmBuB,KAAI,SAAAC,GACpB,OACI,wBAAIC,IAAKD,EAASE,MAAMC,MACpB,4BAAKH,EAAST,KAAKC,OACnB,4BAAKQ,EAAST,KAAKE,MACnB,4BAAKO,EAASI,QACd,4BAAKJ,EAASK,OACd,4BAAKL,EAASM,IAAIC,YChB/BC,MAZf,WACI,OACI,yBAAK7C,UAAU,OAEX,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCQ8C,QACa,cAA7BC,OAAOC,SAASC,UAEa,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACrB,2DCZRC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDyHpB,kBAAmBC,WACnBA,UAAUC,cAAcC,MACnBC,MAAK,SAAAC,GACFA,EAAaC,gBAEhBC,OAAM,SAAAC,GACHzC,QAAQyC,MAAMA,EAAMC,c","file":"static/js/main.95575063.chunk.js","sourcesContent":["import React from 'react';\n\n\n\nfunction Header () {\n    return (\n      <div className=\"header\">\n        <h1>Employee Directory</h1>\n        \n      </div>\n    )\n  }\n\nexport default Header;","import React from \"react\";\n\n\nconst SearchName = () => {\n  \n\n  return (\n    <div className=\"searchbox\">\n      <div className=\"input-group\">\n          <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\" id=\"\">\n              \n            </span>\n          </div>\n          <input\n          className=\"form-control mr-sm-2\"\n          type=\"search\"\n          placeholder=\"name\"\n          aria-label=\"Search\"\n          />\n        </div>\n        <button>Search</button>\n    </div>\n  );\n}\nexport default SearchName;\n","import { createContext } from 'react'\n\nexport const EmployeeContext = createContext(null);\n//context provides a way to share values between components without having to pass a prop through every lvl of tree.\n//from react docs","import { useEffect, useContext } from 'react';\nimport { EmployeeContext } from \"../employee/employee\"\nimport axios from \"axios\"\n\nexport function useGet(url) {\n    const { employees, setEmployees, displayedEmployees, setDisplayedEmployees} = useContext(EmployeeContext)\n\n\n\n    useEffect(() => {\n        async function getEmployees() {\n            try {\n                const response = await axios.get(url)\n                setEmployees(response.data.results)\n                setDisplayedEmployees(response.data.results)\n            }\n            catch (error) {\n                console.log(\"error ocurred getting info from the API: \", error)\n            }\n        }\n        getEmployees()\n    }, [])\n\n    function sortFunc(sort) {\n        switch (sort) {\n            case \"name\":\n                sortByName()\n                break\n            case \"last\":\n                sortByLast()\n                break\n            default:\n                console.log(\"sort does not match any cases\")\n        }\n    }\n\n    // sorts the employees based on first name.\n    function sortByName() {\n        employees.sort(function (a, b) {\n            if (a.name.first < b.name.first) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n\n        setDisplayedEmployees([...employees])\n    }\n\n\n    function sortByLast() {\n        employees.sort(function (a, b) {\n            if (a.name.last < b.name.last) {\n                return -1;\n            } else {\n                return 1;\n            }\n        })\n        setDisplayedEmployees([...employees])\n    }\n\n    return { displayedEmployees, sortFunc }\n}","import React from 'react';\n\nfunction Button({ children }) {\n\n    return (\n        <button className=\"Button\">\n            {children}\n        </button>\n    )\n}\n//the type of an element can be a function or a class corrisponding to react component\n//reactjs.org react-components-elements and instances \nexport default Button;","import React, { useState, useContext } from 'react';\nimport { useGet } from \"../hooks/hooks.js\"\nimport { EmployeeContext } from '../employee/employee';\nimport Button from \"../button/button\"\n\nfunction Table() {\n\n    const [url] = useState(\"https://randomuser.me/api/?results=10\")\n\n    const { sortFunc } = useGet(url);\n\n    const { displayedEmployees } = useContext(EmployeeContext)\n\n    return (\n        <table>\n            <thead>\n                <tr>\n                    <td onClick={() => sortFunc(\"name\")}><Button>First Name</Button></td>\n                    <td>Last Name</td>\n                    <td>UID</td>\n                    <td>Gender</td>\n                    <td>E-mail</td>\n                    <td onClick={() => sortFunc(\"age\")}><Button>Age</Button></td>\n                </tr>\n            </thead>\n            <tbody>\n                {displayedEmployees.map(employee => {\n                    return (\n                        <tr key={employee.login.uuid}>\n                            <td>{employee.name.first}</td>\n                            <td>{employee.name.last}</td>\n                            <td>{employee.gender}</td>\n                            <td>{employee.email}</td>\n                            <td>{employee.dob.age}</td>\n                        </tr>\n                    )\n                }\n                )}\n            </tbody>\n        </table>\n    )\n}\nexport default Table;","import React from 'react';\nimport Header from \"./components/header/header\";\nimport SearchName from './components/search/search';\nimport Table from './components/table/table'\n\nfunction App() {\n    return (\n        <div className=\"App\">\n\n            <Header />\n            <SearchName />\n            <Table />\n\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl, {\n        headers: { 'Service-Worker': 'script' },\n    })\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready\n            .then(registration => {\n                registration.unregister();\n            })\n            .catch(error => {\n                console.error(error.message);\n            });\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}